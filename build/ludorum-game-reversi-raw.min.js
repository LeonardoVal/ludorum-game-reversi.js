//! ludorum-game-reversi 0.1.0

function __init__(a,b,c){"use strict";var d=a.declare,e=a.obj,f=(a.copy,a.raise),g=a.raiseIf,h=a.Iterable,i=a.iterable,j=c.Game,k=c.utils.Checkerboard,l=c.utils.CheckerboardFromString,m=(c.players.UserInterface,{__package__:"ludorum-game-reversi",__name__:"ludorum_game_reversi",__init__:__init__,__dependencies__:[a,b,c],__SERMAT__:{include:[a,c]}}),n=m.Reversi=d(j,{name:"Reversi",constructor:function(a,b){j.call(this,a),this.board=this.makeBoard.apply(this,b||[])},"dual makeBoard":function(a,b,c){return a=isNaN(a)?8:+a,b=isNaN(b)?8:+b,g(a<4||b<4||a%2||b%2,"An Reversi board must have even dimensions greater than 3."),"string"==typeof c?new l(a,b,c):new l(a,b)},players:["Black","White"],lines:function(a){return function(b,c){var d=b+"x"+c,e=a[d];return"undefined"==typeof e&&(e=a[d]=new k(b,c).lines().map(function(a){return a.toArray()},function(a){return a.length>2}).toArray()),e}}({}),__MOVE_REGEXPS__:{Black:[/\.W+B/g,/BW+\./g],White:[/\.B+W/g,/WB+\./g]},"dual boardCenter":function(a){a=a||this.board;var b=a.width,c=a.height;return[[c/2,b/2-1],[c/2-1,b/2],[c/2,b/2],[c/2-1,b/2-1]]},moves:function(a){if(a=a||this.activePlayer(),this.hasOwnProperty("__moves"+a+"__"))return this["__moves"+a+"__"];var b=this.board,c={},d=this.__MOVE_REGEXPS__[a],f=this.boardCenter().filter(function(a){return"."===b.square(a)});if(f.length<1){this.lines(b.height,b.width).forEach(function(a){d.forEach(function(d){b.asString(a).replace(d,function(b,d){var e="."===b.charAt(0)?a[d]:a[b.length-1+d];return c[e]=e,b})})});for(var g in c)f.push(c[g])}return f=f.length>0?e(a,f):null,arguments.length<1?this["__moves"+a+"__"]=f:f},validMoves:function(a){var b=this.moves();for(var c in b){if(!a.hasOwnProperty(c))return!1;var d=b[c].join("\n").indexOf(a[c]+"")>=0;if(!d)return!1}return!0},next:function(a,b,c){g(b,"Haps are not required (given ",b,")!"),this.validMoves(a)||f("Invalid moves "+JSON.stringify(a)+"!");var d,e,h=this.board.clone(),i=this.activePlayer(),j=a[i];return i==this.players[0]?(d="B",e=/^W+B/):(d="W",e=/^B+W/),this.boardCenter().join("\n").indexOf(j+"")>=0?h.__place__(j,d):h.walks(j,k.DIRECTIONS.EVERY).forEach(function(a){var b=e.exec(h.asString(a).substr(1));b&&a.toArray().slice(0,b[0].length).forEach(function(a){h.__place__(a,d)})}),c?(this.constructor(this.opponent(),[h.height,h.width,h.string]),this):new this.constructor(this.opponent(),[h.height,h.width,h.string])},result:function(){if(this.moves())return null;var a={W:-1,B:1},b=i(this.board.string).map(function(b){return a[b]||0}).sum();return this.zerosumResult(b,"Black")},resultBounds:function(){var a=this.board.width*this.board.height;return[-a,+a]},"static __SERMAT__":{identifier:m.__package__+".Reversi",serializer:function(a){return[a.activePlayer(),[a.board.height,a.board.width,a.board.string]]}}});c.games.Reversi=n,m.__SERMAT__.include.push(n);var o=m.Othello=d(n,{name:"Reversi",constructor:function(a,b){if(n.call(this,a,b),!this.moves()){var c=this.opponent();this.moves(c)&&(this.activePlayers=[c])}},"dual makeBoard":function(a,b,c){return a=isNaN(a)?8:+a,b=isNaN(b)?8:+b,g(a<4||b<4||a%2||b%2,"An Othello board must have even dimensions greater than 3."),"string"==typeof c?new l(a,b,c):new l(a,b).__place__([a/2,b/2-1],"W").__place__([a/2-1,b/2],"W").__place__([a/2,b/2],"B").__place__([a/2-1,b/2-1],"B")},"static __SERMAT__":{identifier:m.__package__+".Othello",serializer:function(a){return[a.activePlayer(),[a.board.height,a.board.width,a.board.string]]}}});c.games.Othello=o,m.__SERMAT__.include.push(o);var p=m.heuristics={heuristicFromWeights:function(a){var b=a.length,c=i(a).map(Math.abs).sum(),d=function(d,e){var f=d.board;return g(f.height*f.width!==b,"Wrong amount of weights!"),f.weightedSum(a,{W:"W"===e.charAt(0)?1:-1,B:"B"===e.charAt(0)?1:-1})/c};return d.weights=a,d},heuristicFromSymmetricWeights:function(a,b,c){b=isNaN(b)?8:0|b,c=isNaN(c)?8:0|c;var d=Math.ceil(b/2);return g(d*Math.ceil(c/2)>a.length,"Not enough weights!"),a=h.range(c).map(function(e){var f=e<c/2?e:c-e-1,g=f*d,h=(f+1)*d;return a.slice(g,h).concat(a.slice(g,h-b%2).reverse())}).flatten().toArray(),this.heuristicFromWeights(a)},pieceRatio:function(a,b){var c=0,d=0;return i(a.board.string).forEach(function(a){"."!==a&&(a===b.charAt(0)?++c:++d)}),(c-d)/(c+d)||0},mobilityRatio:function(a,b){var c=a.opponent(b),d=a.moves(b),e=a.moves(c),f=d&&d[b]&&d[b].length||0,g=e&&e[c]&&e[c].length||0;return(f-g)/(f+g)||0}};return p.defaultHeuristic=c.players.HeuristicPlayer.composite(p.heuristicFromSymmetricWeights([9,-3,3,3,-3,-3,-1,-1,3,-1,1,1,3,-1,1,1]),.6,p.pieceRatio,.2,p.mobilityRatio,.2),b.include(m),m}
//# sourceMappingURL=ludorum-game-reversi-raw.min.js.map